; Atoms
(def {nil} {})
(def {true} {1})
(def {false} {0})

; Function definitions
; (def {fun} (~ {f b} {def (head f) (~ (tail f) b)}))

(def {fun} (~ {f b} {
    def (head f) (~ (tail f) b)
}))

; Unpack and pack args
(fun {unpack f l} {
    eval (join (list f) l)
})
(fun  {pack f & xs} {f xs})

; Formal curry/uncurry
(def {curry} {unpack})
(def {uncurry} {pack})

; Perform things in sequence
(fun {do & l} {
    if {== l nil}
        {nil}
        {last l}
})

; Create new scope
(fun {let b} {
    ((~ {_} b) ())
})

; Logical operators
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; Misc. functions
(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; List funcs
(fun {hd l} {eval (head l)})
(fun {len l} {
    if {== l nil}
        {0}
        {+ 1 (len (tail l))}
})

(fun {nth n l} {
    if {== n 0}
        {hd l}
        {nth (- n 1) (tail l)}
})

(fun {last l} {nth (- (len l) 1) l})

(fun {take n l} {
    if {== n 0}
        {nil}
        {join (head l) (take (- n l) (tail l))}
})

(fun {drop n l} {
    if {== n 0}
        {l}
        {drop (- n 1) (tail l)}
})

(fun {split n l} {list (take n l) (drop n l)})

(fun {elem x l} {
    if {== l nil}
    {false}
    {if {== x (hd l)}}
        {true}
        {elem x (tail l)}
})

(fun {map f l} {
    if {== l nil}
        {nil}
        {join (list (f (hd l))) (map f (tail l))}
})

(fun {filter f l} {
    if {== l nil}
        {nil}
        {join (if {f (hd l)}
                {head l}
                {nil})
            (filter f (tail l))
        }
})

(fun {foldl f z l} {
    if {== l nil}
        {z}
        {foldl f (f z (hd l)) (tail l)}
})

(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})
